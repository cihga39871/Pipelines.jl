var documenterSearchIndex = {"docs":
[{"location":"#Pipelines.jl-Documentation","page":"Pipelines.jl Documentation","title":"Pipelines.jl Documentation","text":"","category":"section"},{"location":"","page":"Pipelines.jl Documentation","title":"Pipelines.jl Documentation","text":"CurrentModule = Pipelines","category":"page"},{"location":"","page":"Pipelines.jl Documentation","title":"Pipelines.jl Documentation","text":"Pages = [\n    \"home.md\",\n    \"quick_start.md\"\n]\nDepth = 3","category":"page"},{"location":"#Functions","page":"Pipelines.jl Documentation","title":"Functions","text":"","category":"section"},{"location":"","page":"Pipelines.jl Documentation","title":"Pipelines.jl Documentation","text":"CmdDependency()\ncheck_dependency(::CmdDependency)\ncheck_dependency_dir(p)\ncheck_dependency_file(p)\nCmdProgram()\nrun(::CmdProgram)","category":"page"},{"location":"#Pipelines.check_dependency-Tuple{CmdDependency}","page":"Pipelines.jl Documentation","title":"Pipelines.check_dependency","text":"check_dependency(p::CmdDependency) -> Bool\n\nCheck CmdDependency by evaluating (pexec) (ptest_args).\n\nIf success, return true. \n\nIf fail, return false, or throw DependencyError when p.exit_when_fail set to true.\n\n\n\n\n\n","category":"method"},{"location":"#Pipelines.CmdProgram-Tuple{}","page":"Pipelines.jl Documentation","title":"Pipelines.CmdProgram","text":"CmdProgram(;\n\tname::String               = \"Unnamed Command Program\",\n\tid_file::String            = \"\",\n\tinfo_before::String        = \"auto\",\n\tinfo_after::String         = \"auto\",\n\tcmd_dependencies::Vector{CmdDependency} = Vector{CmdDependency}(),\n\tinputs::Vector{String}     = Vector{String}(),\n\tvalidate_inputs::Function  = do_nothing,  # positional arguments: inputs::Dict{String, ValidInputTypes}\n\tprerequisites::Function    = do_nothing,  # positional arguments: inputs, outputs::Dict{String, ValidInputTypes}\n\tcmd::Base.AbstractCmd      = ``,\n\tinfer_outputs::Function    = do_nothing,  # positional arguments: inputs::Dict{String, ValidInputTypes}\n\toutputs::Vector{String}    = Vector{String}(),\n\tvalidate_outputs::Function = do_nothing  # positional arguments: outputs::Dict{String, ValidInputTypes}\n) -> CmdProgram\n\nCommand program template. To run a CmdProgram, use run(::CmdProgram; kwargs...).\n\nname::String: Program name.\nid_file::String: The prefix of run ID file. To prevent from running the program with the same inputs and outputs twice, it will generate a unique run ID file after a successful run.\ninfo_before::String: Print it when starting the program.\ninfo_after::String: Print it when finishing the program.\ncmd_dependencies::Vector{CmdDependency}: Any command dependencies used in the program.\ninputs and outputs: keywords (Vector{String}) in cmd that can be replaced when envoking run(::CmdProgram, inputs::Dict{String, Union{Cmd, AbstractString, Number, Array{T,1} where T}}, outputs::Dict{String, Union{Cmd, AbstractString, Number, Array{T,1} where T}}). See details below.\nCmdProgram stores a command template. In the template, replaceable portions are occupied by keywords, and all keywords are set in inputs::Vector{String} and outputs::Vector{String}.\nTo run the program with replaced keywords, you need to use run(::CmdProgram; inputs::Dict{String, Union{Cmd, AbstractString, Number, Array{T,1} where T}}, outputs::Dict{String, Union{Cmd, AbstractString, Number, Array{T,1} where T}}). The data type is different.\nvalidate_inputs::Function: A function to validate inputs. It takes one argument Dict{String, Union{Cmd, AbstractString, Number, Array{T,1} where T}} whose keys are the same as inputs. If validation fail, throw error or return false.\nprerequisites: A function to run just before the main command. It prepares necessary things, such as creating directories. It takes two arguments Dict{String, Union{Cmd, AbstractString, Number, Array{T,1} where T}} whose keys are the same as inputs and outputs, respectively.\ncmd::AbstractCmd: The main command template. In the template, keywords in inputs::Vector{String} and outputs::Vector{String} will be replaced when envoking run(::CmdProgram, inputs::Dict{String, Union{Cmd, AbstractString, Number, Array{T,1} where T}}, outputs::Dict{String, Union{Cmd, AbstractString, Number, Array{T,1} where T}}).\ninfer_outputs::Function: A function to infer outputs from inputs. It takes one argument Dict{String, Union{Cmd, AbstractString, Number, Array{T,1} where T}} whose keys are the same as inputs.\nvalidate_outputs::Function: A function to validate outputs. It takes one argument Dict{String, Union{Cmd, AbstractString, Number, Array{T,1} where T}} whose keys are the same as outputs. If validation fail, throw error or return false.\n\n\n\n\n\n","category":"method"},{"location":"#Base.run-Tuple{CmdProgram}","page":"Pipelines.jl Documentation","title":"Base.run","text":"run(\n\tp::CmdProgram;\n\tinputs::Dict{String}=Dict{String, Cmd}(),\n\toutputs::Dict{String}=Dict{String, Cmd}(),\n\tskip_when_done::Bool=true,\n\tcheck_dependencies::Bool=true,\n\tstdout=nothing,\n\tstderr=nothing,\n\tappend::Bool=false,\n\tverbose::Bool=true,\n\ttouch_run_id_file::Bool=true,\n\tdry_run::Bool=false\n) -> (success::Bool, outputs::Dict{String})\n\nrun(\n\tp::CmdProgram,\n\tinputs::Dict{String},\n\toutputs::Dict{String};\n\tkwargs...\n)\n\nrun(\n\tp::CmdProgram,\n\tinputs::Dict{String},\n\tkwargs...\n)\n\nRun Command Program (CmdProgram) using specified inputs and outputs.\n\nReturn (success::Bool, outputs::Dict{String})\n\np::CmdProgram: the command program template.\ninputs::Dict{String} and outputs::Dict{String}: p::CmdProgram stores a command template. In the template, replaceable portions are occupied by keywords, and all keywords can be found at p.inputs and p.outputs string vectors. Here, inputs and outputs are Dict(keyword::String => replacement::Union{Cmd, AbstractString, Number, Array{T,1} where T}). The replacements do not have a length limit, unless a keyword refers to a filename (length == 1).\nskip_when_done::Bool = true: Skip running the program and return true if it has been done before (the run_id_file exists and p.validate_outputs(outputs) passes.)\ncheck_dependencies::Bool = true: check dependencies for p (p.cmd_dependencies).\nstdout, stderr and append: Redirect the program output to files, the same behavior as pipeline(cmd; stdout=stdout, stderr=stderr, append=append). Caution: use after checking whether the original command has redirection.\nverbose::Bool = true: If true, print info and error messages. If false, print error messages only.\ntouch_run_id_file::Bool = true: If true, touch a unique run ID file, which indicate the program is successfully run with given inputs and outputs. If false, the next time running the program, skip_when_done=true will not take effect.\ndry_run::Bool = false: do not run the command, return (command::AbstractCmd, run_id_file::String).\n\nWorkflow\n\nValidate compatibility between p and inputs/outputs.\nCheck whether the program has run before. (skip_when_done, p.validate_outputs(outputs))\nCheck command dependencies. (check_dependencies, p.cmd_dependencies)\nValidate inputs. (p.validate_inputs(inputs))\nGenerate runnable command from p and inputs/outputs. (stdout, stderr, append)\nPreparing before running main command. (p.prerequisites(inputs, outputs))\nRun command generated in #5.\nValidate outputs. (p.validate_outputs(outputs))\nSuccess, touch runidfile, and return true. (touch_run_id_file::Bool)\n\n\n\n\n\n","category":"method"}]
}
